%%% shift confocal stack to account for drift in x and y
% stackin is the stack table generated by getConfocalData
% xCorrectionPerSlice = how many pix to move each slice left relative to the slice above   
% yCorrectionPerSlice = how many pix to move each slice down (in y plane) relative to the slice above (in z plane)  
%%% corrections per slice can be fractions
%%% last updated 3/31/17

function shifted_stack = shift_confocal_stack(stackin,xCorrectionPerSlice,yCorrectionPerSlice)

nstacks = size(stackin,2);
nslices = height(stackin);
shifted_stack = table;
for i = 1:nstacks
    shifted_stack{1:nslices, stackin.Properties.VariableNames{i}} = cell(nslices,1);
end
shifted_stack.xcorrection = xCorrectionPerSlice * (0:nslices-1)';
shifted_stack.ycorrection = yCorrectionPerSlice * (0:nslices-1)';
shifted_stack.xcorrection_round = round(shifted_stack.xcorrection);
shifted_stack.ycorrection_round = round(shifted_stack.ycorrection);
blankslice = stackin{1,1}{:,:};
blankslice(:,:) = 0;
xmax = size(blankslice,2);
ymax = size(blankslice,1);

for indstack = 1:nstacks
    indstack
    for indslice = 1:nslices
%         indslice
        sliceToShift = stackin{indslice,indstack}{:,:};
        xshift = shifted_stack.xcorrection_round(indslice); 
        yshift = shifted_stack.ycorrection_round(indslice); 
        thisslice = blankslice;
        thisslice(       max([1 1+yshift]):min([ymax ymax+yshift]),max([1 1+xshift]):min([xmax xmax+xshift])) = ...
            sliceToShift(max([1 1-yshift]):min([ymax ymax-yshift]),max([1 1-xshift]):min([xmax xmax-xshift]));
        shifted_stack{indslice,indstack}{:,:} = thisslice;
    end
end
