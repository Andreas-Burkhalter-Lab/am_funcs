function colors = distinguishable_colors(n_colors,bg,options)
% DISTINGUISHABLE_COLORS: pick colors that are maximally perceptually distinct
%
% When plotting a set of lines, you may want to distinguish them by color.
% By default, Matlab chooses a small set of colors and cycles among them,
% and so if you have more than a few lines there will be confusion about
% which line is which. To fix this problem, one would want to be able to
% pick a much larger set of distinct colors, where the number of colors
% equals or exceeds the number of lines you want to plot. Because our
% ability to distinguish among colors has limits, one should choose these
% colors to be "maximally perceptually distinguishable."
%
% This function generates a set of colors which are distinguishable
% by reference to the "Lab" color space, which more closely matches
% human color perception than RGB. Given an initial large list of possible
% colors, it iteratively chooses the entry in the list that is farthest (in
% Lab space) from all previously-chosen entries. While this "greedy"
% algorithm does not yield a global maximum, it is simple and efficient.
% Moreover, the sequence of colors is consistent no matter how many you
% request, which facilitates the users' ability to learn the color order
% and avoids major changes in the appearance of plots when adding or
% removing lines.
%
% Syntax:
%   colors = distinguishable_colors(n_colors)
% Specify the number of colors you want as a scalar, n_colors. This will
% generate an n_colors-by-3 matrix, each row representing an RGB
% color triple. If you don't precisely know how many you will need in
% advance, there is no harm (other than execution time) in specifying
% slightly more than you think you will need.
%
%   colors = distinguishable_colors(n_colors,bg)
% This syntax allows you to specify the background color, to make sure that
% your colors are also distinguishable from the background. Default value
% is white. bg may be specified as an RGB triple or as one of the standard
% "ColorSpec" strings.
%
%   colors = distinguishable_colors(n_colors,bg,rgb2labfunc)
% By default, distinguishable_colors uses the image processing toolbox's
% color conversion functions makecform and applycform. Alternatively, you
% can supply your own color conversion function.
%
% Example:
%   c = distinguishable_colors(25);
%   figure
%   image(reshape(c,[1 size(c)]))
%
% Example using the file exchange's 'colorspace':
%   func = @(x) colorspace('RGB->Lab',x);
%   c = distinguishable_colors(25,'w',func);

% Copyright 2010 by Timothy E. Holy

  if (nargin < 2)
    bg = [1 1 1];  % default white background
  else
    if ischar(bg)
      % Background color provided as a color string
      bg = colorstr2rgb(bg);
    end
    if (numel(bg) ~= 3)
      error('bg must be an RGB triple or a ColorSpec string');
    end
    bg = bg(:)';  % make it a row vector
  end
  if (nargin < 3)
    options = struct;
  end
  if ~isfield(options,'map');
    % The default is the map to Lab color space, which more closely
    % represents human perception
    C = makecform('srgb2lab');
    options.map = @(rgb) applycform(rgb,C);
  end
  allocate_blocks = isfield(options,'block');
  
  % Generate a sizable number of RGB triples. This represents our space of
  % possible choices. By starting in RGB space, we ensure that all of the
  % colors can be generated by the monitor.
  n_grid = 30;  % number of grid divisions along each axis in RGB space
  x = linspace(0,1,n_grid);
  [R,G,B] = ndgrid(x,x,x);
  rgb = [R(:) G(:) B(:)];
  if (n_colors > size(rgb,1)/3)
    error('You can''t readily distinguish that many colors');
  end
  
  % Map the candidate colors to the target color space. Also, set the
  % sentinel value for the square distance to the closest-picked color
  % yet. If allocating in blocks, set the sentinel value to the
  % minimum pairwise distance among all members of the block (this will
  % prevent choosing blocks that are not readily distinguishable among
  % themselves)
  mindist2 = inf(size(rgb,1),1);  % no colors picked, distance is infinite
  n_per_block = 1;
  if allocate_blocks
    rgb_blocks = permute(options.block(rgb),[1 3 2]);
    sz = size(rgb_blocks);
    mapped = options.map(reshape(rgb_blocks,[sz(1)*sz(2) sz(3)]));
    mapped = reshape(mapped,sz);
    mapped = permute(mapped,[1 3 2]);
    n_per_block = size(mapped,3);
    for i = 1:n_per_block
      for j = i+1:n_per_block
        dX = mapped(:,:,i) - mapped(:,:,j);
        dist2 = sum(dX.^2,2);
        mindist2 = min(dist2,mindist2);
      end
    end
  else
    mapped = options.map(rgb);
  end
  bgmapped = options.map(bg);
  
  % Iteratively pick the color that maximizes the distance to the nearest
  % already-picked color
  colors = zeros(n_colors,3);
  lastmapped = bgmapped;   % initialize by making the "previous" color equal to background
  for i = 1:n_colors
    for blockIndex1 = 1:n_per_block
      for blockIndex2 = 1:size(lastmapped,3)
        dX = bsxfun(@minus,mapped(:,:,blockIndex1),lastmapped(:,:,blockIndex2)); % displacement of last from all colors on list
        dist2 = sum(dX.^2,2);  % square distance
        mindist2 = min(dist2,mindist2);  % dist2 to closest previously-chosen color
      end
    end
    [~,index] = max(mindist2);  % find the entry farthest from all previously-chosen colors
    colors(i,:) = rgb(index,:);  % save for output
    lastmapped = mapped(index,:,:);  % prepare for next iteration
  end
  if allocate_blocks
    colors = options.block(colors);
  end
end
  
function c = colorstr2rgb(c)
  % Convert a color string to an RGB value.
  % This is cribbed from Matlab's whitebg function.
  % Why don't they make this a stand-alone function?
  rgbspec = [1 0 0;0 1 0;0 0 1;1 1 1;0 1 1;1 0 1;1 1 0;0 0 0];
  cspec = 'rgbwcmyk';
  k = find(cspec==c(1));
  if isempty(k)
    error('MATLAB:whitebg:InvalidColorString','Unknown color string.');
  end
  if k~=3 || length(c)==1,
    c = rgbspec(k,:);
  elseif length(c)>2,
    if strcmpi(c(1:3),'bla')
      c = [0 0 0];
    elseif strcmpi(c(1:3),'blu')
      c = [0 0 1];
    else
      error('MATLAB:whitebg:UnknownColorString', 'Unknown color string.');
    end
  end
end
