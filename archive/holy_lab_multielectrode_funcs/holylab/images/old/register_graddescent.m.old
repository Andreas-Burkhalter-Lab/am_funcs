function [g,J,psig,old_val] = register_graddescend(psi1,psi2,lambda,mu,g,options)
  n_dims = ndims(psi1);
  n_pix = numel(psi1);
  if (nargin < 6)
    options = struct;
  end
  if ~isfield(options,'mu_decrease_factor')
    options.mu_decrease_factor = 15;
  end
  if ~isfield(options,'mu_increase_factor')
    options.mu_increase_factor = 10;
  end
  if ~isfield(options,'iter_max')
    options.iter_max = 50;
  end
  if ~isfield(options,'step2_thresh')
    options.step2_thresh = 0.01;
  end
  cls1 = class(psi1);
  cls2 = class(psi2);
  if (strcmp(cls1(1),'u') || strcmp(cls2(1),'u'))
    error('Unsigned types not supported, use regular ints')
  end
  colons = repmat({':'},1,n_dims);
  
  %
  % Compute the deformed image
  %
  if ~isfield(options,'J')
    [psig,J,detJ] = register_psig(psi2,g);
  else
    [psig,J] = register_psig(psi2,g,options.J);
  end
  %
  % Compute the value of the energy
  %
  old_val = register_gradstep_energy(psi1,psig,detJ,lambda);
  still_descending = true;
  iter = 0;
  while still_descending
    %
    % Compute the gradient with respect to g
    %
    [grad_data,grad_reg] = register_gradient(psi1,psig,J,options);
    grad_g = grad_data + lambda*grad_reg;
    
    is_lower = false;
    while (~is_lower && iter < options.iter_max)
      %
      % Update g, and calculate the new energy
      %
      for dimIndex = 1:n_dims
        g_new{dimIndex} = g{dimIndex} - mu*squeeze(grad_g(dimIndex,colons{:}));
      end
      [psig_new,J_new,detJ_new] = register_psig(psi2,g_new);
      new_val = register_gradstep_energy(psi1,psig_new,detJ_new,lambda);
      is_lower = (new_val <= old_val);
      if ~is_lower
        mu = mu/options.mu_decrease_factor;
      end
      iter = iter+1;
    end
    if is_lower
      %
      % We were successful, keep the step & determine if converged
      %
      g = g_new;
      psig = psig_new;
      J = J_new;
      detJ = detJ_new;
      old_val = new_val;
      step2 = mu^2 * grad_g.^2;
      step2 = sum(step2,1);
      still_descending = any(step2(:) > options.step2_thresh);
      mu = mu * options.mu_increase_factor;
      return
    else
      %
      % We failed to update successfully, we must have run out of
      % iterations
      %
      warning(['Maximum number of iterations exceeded without convergence,' ...
	       ' aborting']);
      still_descending = false;
    end
  end  % while still_descending
  
  
function energy = register_gradstep_energy(psi1,psig,detJ,lambda)
  n_pix = numel(psi1);
  % The data penalty
  nanFlag = isnan(psig);
  tmp_im = (psi1-psig).^2;
  energy = sum(tmp_im(~nanFlag(:)))/sum(~nanFlag(:));
  % The regularization penalty
%   for pixelIndex = 1:n_pix
%     tmp_im = det(J(:,:,pixelIndex));
%   end
  tmp_im = log(abs(detJ));
  energy = energy + lambda*mean(tmp_im(:));


function J = register_jacobian(g)
  n_dims = length(g);
  colons = repmat({':'},1,n_dims);
  J = nan([n_dims n_dims sz],'single');
  for dimIndex1 = 1:n_dims
    for dimIndex2 = 1:n_dims
      J(dimIndex1,dimIndex2,colons{:}) = deriv(g{dimIndex1},dimIndex2);
    end
  end

function [grad_data,grad_reg] = register_gradient(psi1,psig,J,options)
  if (nargin < 4)
    options = struct;
  end
  n_dims = ndims(psi1);
  sz = size(psi1);
  if ~isequal(size(psig),sz)
    error('psi1 and psig must be of the same size');
  end
  n_pix = numel(psi1);
  colons = repmat({':'},1,n_dims);
  % Compute gradients
  if ~isfield(options,'grad_psi1')
    grad_psi1 = cell(1,n_dims);
    for dimIndex = 1:n_dims
      grad_psi1{dimIndex} = deriv(psi1,dimIndex);
    end
  else
    grad_psi1 = options.grad_psi1;
  end
  grad_psig = cell(1,n_dims);
  for dimIndex = 1:n_dims
    grad_psig{dimIndex} = deriv(psig,dimIndex);
  end
  % Compute the wronskian
  w = zeros([n_dims sz],'single');
  for dimIndex = 1:n_dims
    w(dimIndex,colons{:}) = psig .* grad_psi1{dimIndex} - ...
      psi1 .* grad_psig{dimIndex};
  end
  w(isnan(w)) = 0;  % Get rid of data terms when over the edge
  % Compute the inverse transposed Jacobian, and while at it multiply the
  % wronskian to get the gradient with respect to the data
  Jt = permute(J,[2 1 3:(n_dims+2)]);
  Jti = nan([n_dims n_dims sz],'single');
  grad_data = nan([n_dims sz],'single');
  for pixelIndex = 1:n_pix
    tmp = inv(Jt(:,:,pixelIndex));
    grad_data(:,pixelIndex) = tmp * w(:,pixelIndex);
    Jti(:,:,pixelIndex) = tmp;
  end
  % Now do the regularization term
  grad_reg = zeros([n_dims sz]);
  % Compute the divergence of each row
  for dimIndex1 = 1:n_dims
    for dimIndex2 = 1:n_dims
      grad_reg(dimIndex1,colons{:}) = squeeze(grad_reg(dimIndex1,colons{:})) + ...
        deriv(squeeze(Jti(dimIndex1,dimIndex2,colons{:})),dimIndex2);
    end
  end
