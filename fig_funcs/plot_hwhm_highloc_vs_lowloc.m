 %%%% plot hwhwm for sf, tf, orient comparing tuning curves generated by...
%%%% ... high locomotion vs. low locomotion trials
%
% updated 2020/9/24

% load('F:\analyses\cells20-9-21')

close all
clear ops groupstats
ops.meets_criteria = true(height(roitable),1); % reset meets_criteria

%% parameters

ops.save_fig = 1;
    ops.savename = 'F:\thesis\figs\2020-9-15\fig s1 -- hwhm_highloc_vs_lowloc';

stimpars_to_plot = {'sf', 'tf', 'orient'}; 

%%%% require significant tuning for variable of interest
% ops.meets_criteria = ops.meets_criteria & roitable{:, [stimparam, '_anovap']} < 0.05; 
% ops.meets_criteria = ops.meets_criteria & [ roitable{:,'sf_sgnf'} | roitable{:,'tf_sgnf'} | roitable{:,'orient_sgnf'} ]; 

ops.meets_criteria = ops.meets_criteria & roitable.pakan_loc_sgnf; 
% ops.meets_criteria = ops.meets_criteria & roitable.stim_overlap_frac > 0.00; % stim on RF

require_sgnf_tuning_for_each_stimpar = 1; % cells tested for sf_hwhm must be sf_sgnf, tf_hwhm must be tf_sgnf, orient_hwhm orient_sgnf

ops.newfig = 1; 
ops.ebar_thickness = 3; 
ops.ebar_cap_size = 6;
ops.ebar_color = [0 0 0]; 
ops.font_name = 'Arial'; 
ops.axis_thickness = 3.5;
ops.bar_quant_colors = repmat(linspace(0.08,0.86,6)',1,3);
    ops.quant_bar_width = 0.9; %%% bar width for quantile plotting only
ops.bar_one_color = [0.5 0.5 0.5]; 
ops.bar_quant_border_color = [1 1 1]; 
ops.bargraph_line_width = 4;
ops.axis_font_bold = 1; % font bold or not bold
ops.axis_font_size = 13;
ops.xlim = [0.3 2.7]; 
ops.subplot_row_col = [1 3]; 
ops.subplot_spacing_yx = [0.1 0.13]; 

%     ops.ylim = [0.0 0.16]; 
% ops.fig_outerposition = [0.05 0.05 0.22 0.60]; % [left bottom width height]... fig 2 pakanloc by module
%     ops.fig_outerposition = [0.05 0.05 0.42 0.65]; % [left bottom width height]... fig 2 orient_si, rf_sgnf
    ops.fig_outerposition = [0.05 0.05 0.7 0.32]; % [left bottom width height]... fig 2 orient_si, ~rf_sgnf
    
    
%% plotting 
    
n_stimpars = length(stimpars_to_plot); 
groupstats = table;
if ops.newfig; hfig = figure('units','normalized','outerposition',ops.fig_outerposition); end
    
for ipar = 1:n_stimpars
    %%%% get values to plot
    clear matchrows
    matchrows = ops.meets_criteria; 
    
    this_stimpar = stimpars_to_plot{ipar};
    groupstats.stimpar{ipar} = this_stimpar; 
    if require_sgnf_tuning_for_each_stimpar
        matchrows = matchrows & roitable{:,[this_stimpar, '_sgnf']}; % require tuning for this specific stimpar
    end
    groupstats.matchrows{ipar} = matchrows; 
    groupstats.hwhm_low_locm{ipar} = roitable{matchrows, [this_stimpar, '_hwhm_low_locm']};
    groupstats.hwhm_low_locm{ipar} = groupstats.hwhm_low_locm{ipar}( ~isnan(groupstats.hwhm_low_locm{ipar}) ); % remove NaNs
    groupstats.hwhm_high_locm{ipar} = roitable{matchrows, [this_stimpar, '_hwhm_high_locm']};
    groupstats.hwhm_high_locm{ipar} = groupstats.hwhm_high_locm{ipar}( ~isnan(groupstats.hwhm_high_locm{ipar}) ); % remove NaNs
    groupstats.n_lowloc(ipar) = length(groupstats.hwhm_low_locm{ipar}); 
    groupstats.n_highloc(ipar) = length(groupstats.hwhm_high_locm{ipar}); 
    groupstats.mean_lowloc(ipar) = mean(groupstats.hwhm_low_locm{ipar}); 
    groupstats.mean_highloc(ipar) = mean(groupstats.hwhm_high_locm{ipar});
    groupstats.sem_lowloc(ipar) = std(groupstats.hwhm_low_locm{ipar}) / sqrt(groupstats.n_lowloc(ipar)); % standard error
    groupstats.sem_highloc(ipar) = std(groupstats.hwhm_high_locm{ipar}) / sqrt(groupstats.n_highloc(ipar)); % standard error
    
    %%%% do plotting
    means_to_plot = [groupstats.mean_lowloc(ipar), groupstats.mean_highloc(ipar)];
    sems_to_plot = [groupstats.sem_lowloc(ipar), groupstats.sem_highloc(ipar)];
    


    subtightplot(ops.subplot_row_col(1), ops.subplot_row_col(2), ipar, ops.subplot_spacing_yx)   
    barhandle = bar(means_to_plot); 
    barhandle.FaceColor = ops.bar_one_color; 
    barhandle.LineWidth = ops.bargraph_line_width; 
    hax = gca; 
    hax.XTick = []; 
    
    hold on

    ebar = errorbar(1:2,means_to_plot,sems_to_plot,'.','Color',ops.ebar_color);
    hold off
    hax.FontName = ops.font_name;
    hax.FontSize = ops.axis_font_size;
    hax.LineWidth = ops.axis_thickness;
    ebar.LineWidth = ops.ebar_thickness; % set errorbar line width
    ebar.Color = ops.ebar_color; % set errorbar line color
    ebar.CapSize = ops.ebar_cap_size; 
    if isfield(ops,'ylim'); ylim(ops.ylim); end
    if isfield(ops,'xlim'); xlim(ops.xlim); end
    if ops.axis_font_bold; set(gca,'FontWeight','bold'); end
    set(gca,'LooseInset',get(gca,'TightInset')+[0 0 0.005 0]) % crop borders
    set(gca,'Box','off')
        
    % print results
    this_stimpar
    [h p] = ttest2(groupstats.hwhm_low_locm{ipar}, groupstats.hwhm_high_locm{ipar}) %%% t-test
        
end

% save plot
if ops.save_fig
    if exist(savename,'file')
        delete(ops.savename)
    end
    saveas(hfig, ops.savename, 'svg')
end